// <auto-generated />
using System;
using System.Collections.Generic;
using AltermedManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AltermedManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250318141721_AddDoctorsSurname")]
    partial class AddDoctorsSurname
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AltermedManager.Models.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("houseNumber")
                        .HasColumnType("integer");

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Appointment", b =>
                {
                    b.Property<Guid>("appointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("doctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("placeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("recordId")
                        .HasColumnType("uuid");

                    b.Property<int>("startSlot")
                        .HasColumnType("integer");

                    b.Property<int>("statusOfAppointment")
                        .HasColumnType("integer");

                    b.Property<Guid>("treatmentId")
                        .HasColumnType("uuid");

                    b.HasKey("appointmentId");

                    b.HasIndex("patientId");

                    b.HasIndex("placeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Doctor", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("doctorLicense")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("doctorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("doctorSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("specList")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("recordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("appointmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("createdBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("recordType")
                        .HasColumnType("integer");

                    b.HasKey("recordID");

                    b.HasIndex("patientId");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Patient", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<char>("gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("healthProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("patientAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("patientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("patientID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("patientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("patientPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("patientSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("patientAddressId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.PatientRequest", b =>
                {
                    b.Property<Guid>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("doctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isUrgent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("patientId")
                        .HasColumnType("uuid");

                    b.Property<int>("requestType")
                        .HasColumnType("integer");

                    b.Property<Guid>("treatmentId")
                        .HasColumnType("uuid");

                    b.HasKey("requestId");

                    b.HasIndex("patientId");

                    b.ToTable("PatientRequest");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Treatment", b =>
                {
                    b.Property<int>("treatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("treatmentId"));

                    b.PrimitiveCollection<int[]>("SuitCategories")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("treatmentDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("treatmentDuration")
                        .HasColumnType("integer");

                    b.Property<int>("treatmentPlaceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("treatmentPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("treatmetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("treatmentId");

                    b.HasIndex("treatmentPlaceId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Appointment", b =>
                {
                    b.HasOne("AltermedManager.Models.Entities.Patient", null)
                        .WithMany("appointments")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AltermedManager.Models.Entities.Address", "place")
                        .WithMany()
                        .HasForeignKey("placeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("place");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.MedicalRecord", b =>
                {
                    b.HasOne("AltermedManager.Models.Entities.Patient", null)
                        .WithMany("medicalRecords")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Patient", b =>
                {
                    b.HasOne("AltermedManager.Models.Entities.Address", "patientAddress")
                        .WithMany()
                        .HasForeignKey("patientAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patientAddress");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.PatientRequest", b =>
                {
                    b.HasOne("AltermedManager.Models.Entities.Patient", null)
                        .WithMany("requests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Treatment", b =>
                {
                    b.HasOne("AltermedManager.Models.Entities.Address", "treatmentPlace")
                        .WithMany()
                        .HasForeignKey("treatmentPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("treatmentPlace");
                });

            modelBuilder.Entity("AltermedManager.Models.Entities.Patient", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("medicalRecords");

                    b.Navigation("requests");
                });
#pragma warning restore 612, 618
        }
    }
}
